Epitech Rennes                                                  O. Krull
Request for Comments: 0001                                   M. Boucault
Category: Standards Track                                      M. Bonnet
                                                          N. Deschaseaux
                                                           J. Amalfitano
                                                                 Epitech
                                                            Janvier 2024

                            R-Type Protocols

Status of this Memo

   This memo is the official specification of the R-Type Protocols.
   The R-Type is a third year project from EPITECH. Distribution of this
   memo is unlimited.

Table of Contents

   1.   Introduction . . . . . . . . . . . . . . . . . . . . . . . . . 1
   2.   R-Type architecture  . . . . . . . . . . . . . . . . . . . . . 2
   3.   R-Type TCP Protocol  . . . . . . . . . . . . . . . . . . . . . 2
   3a.   Payload . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
   3b.   Server connection . . . . . . . . . . . . . . . . . . . . . . 3
   3c.   Lobby connection  . . . . . . . . . . . . . . . . . . . . . . 3
   3d.   Game start  . . . . . . . . . . . . . . . . . . . . . . . . . 5
   4.   R-Type UDP Protocol  . . . . . . . . . . . . . . . . . . . . . 6
   4a.   Player events . . . . . . . . . . . . . . . . . . . . . . . . 7



1.  Introduction
   
   The purpose of the project R-Type is to create a multiplayer online
   game engine and running an existing game name R-Type release in 1987

//   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
//   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
//   document are to be interpreted as described in RFC 2119.

2.  R-Type architecture

   The architecture of this project is a classic client-server game
   architecture.
   ??Each game engine can be server or client. A client connect to a server
   ??by configuring his configuration file.
   Multiple clients can connect to the server at the same time.

Krull                           Standards Track                  [Page 1]

RFC 0001                    R-Type Protocols                 Janvier 2024


3.  R-Type TCP Protocol

   3a.  Payload

      Every transmission MUST transmit a payload containing this 4 datas:

         u_int64_t TimeStamp (since the Epoch see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16);
         u_int64_t Entity_ID;
         Event event;
         u_int64_t nbComp;

      Where TimeStamp is the time reference since the Epoch base on the
      year 1970 see:
      https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16

      The Entity_ID is the ID given to an Entity that will be use for the
      gameEngine.

      The Event enumeration:

         enum Event : int {
            New,
            Edit,
            Delete
         };
      
      The nbComp is the number of Component the Entity_ID is composed 

      To send a payload, each data MUST be written on the UDP socket in
      this order: TimeStamp, Entity_ID, Event, nbComp.


Krull                        Standards Track                     [Page 2]

RFC 0001                    R-Type Protocols                 Janvier 2024


   3b.  Server connection

      To connect to the server, the client MUST send to the server a
      payload containing:

         //??ACTION_NAME = CONNECT
         //??BODY_SIZE = PLAYER_NAME's length
         //??BODY = PLAYER_NAME (chosen by the client's user)

   3c.  Lobby connection

      Once connected to the server is launched, the client to the server
      to join the game hosted by the server.

   3d.  Game start

      Once the sever is launched, the game start.
      If a new client decide to connect to the server he will join the
      game started.

4.  R-Type UDP Protocol

   4a.  Player events

      The player, on the client-side, can execute several actions. On
      each player action, the client MUST send to the server a specific
      event payload containing informations about the action. This
      payload MUST begins with an element (on 4 bytes) from the EVENT
      enumeration, described below:

         enum EVENT {
            MOVE,
            SHOOT,
            QUIT
         };

         The MOVE event:

            The player wants to move (to the left, right, up or down).
            The client MUST add to the payload an element (on 4 bytes)
            of the DIRECTION enumeration (described below) right after
            the EVENT element. Thus, if the player wants to move, the
            payload MUST be 8 bytes long.

            enum DIRECTION {
               LEFT,
               RIGHT,
               UP,
               DOWN
            };

         The SHOOT event:

            The player wants to shoot. In this case, the payload MUST be
            only 4 bytes long.

         The QUIT event:

            The player wants to quit the game. The client MUST warn the
            server with this 4 bytes long payload before quitting. The
            client MAY exit without any response from the server.





Krull                        Standards Track                     [Page 6]
